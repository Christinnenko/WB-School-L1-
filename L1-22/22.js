// Посчитайте сколько раз можно вызвать функцию document.write() внутри document.write(). Объясните результат.

// Итого в браузере Google Chrome у меня получилось вызвать document.write() внутри document.write() 6895 раз.

// Вывод:
// Рекурсивный вызов tryDocumentWrite(), который вызывает сам себя после каждого успешного вызова document.write() приводит к переполнению стека вызовов.

// 1.Стек вызовов: Во многих средах выполнения JS есть ограничение на глубину стека вызовов. Если вложить слишком много вызовов, может произойти переполнение стека.
// 2.Размер документа: document.write() добавляет контент в документ. Некоторые браузеры или серверные окружения могут ограничивать размер документа
// или количество вызовов document.write() для предотвращения переполнения памяти.
// 3.Специфика браузера: Разные браузеры могут иметь различные ограничения на выполнение JS и могут вести себя по-разному.

let writeCounter = 0;

function tryDocumentWrite() {
  // Функция для попытки вызова document.write() и обработки исключений
  try {
    document.write(
      `This is document.write() call number ${writeCounter + 1}.<br>`
    );
    writeCounter++;
    tryDocumentWrite(); // Рекурсивный вызов для следующей попытки
  } catch (error) {
    // Обработка исключения, если не удается вызвать document.write()
    console.log(
      `Unable to call document.write(). Total calls: ${writeCounter}`
    );
  }
}

tryDocumentWrite();
